//
//  OMError.swift
//  AlamofireObjectMapperDemo
//
//  Created by jumpingfrog0 on 10/01/2017.
//
//
//  Copyright (c) 2017 Jumpingfrog0 LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import Foundation
import ObjectMapper
import Alamofire

/// The error codes generated by AlamofireObjectMapper.
public enum OMCode: Int {
    
    // Network or parsing error
    case unknownError = -1
    case networkError = -10000
    case dataSerializationFailed = -10001
    case jsonSerializationFailed = -10002
    case xmlSerializationFailed = -10003
    case objectSerializationFailed = -10004
    case jsonObjectDowncastFailed = -10005
}

extension SessionManager {
    struct AssociatedKey {
        static var serviceErrorCode = "com.AlamofireObjectMapper.serviceErrorCode"
    }
    
    struct OMCode {
        var illegalAccessToken = 1001
        var illegalRefreshToken = 1005
    }
    
    var serviceErrorCode: OMCode? {
        get {
            return objc_getAssociatedObject(self, &AssociatedKey.serviceErrorCode) as? SessionManager.OMCode
        }
        set {
            objc_setAssociatedObject(self, &AssociatedKey.serviceErrorCode, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
        }
    }
}

public enum OMError: Error {

    /// The domain used for creating all AlamofireObjectMapper errors.
    public static let Domain = "com.jumpingfrog0.alamofireObjectMapper"
    
    public enum JsonObjectDowncastFailureReason {
        case responseJsonInvalid
        case resultJsonInvalid
        case codeSectionInvalid
        case messageSectionInvalid
        case dataSectionInvalidObject
        case dataSectionInvalidCollection
    }
    
    case network(error: Error, code: OMCode)
    case dataSerializationFailed(error: Error, code: OMCode)
    case jsonSerializationFailed(error: Error, code: OMCode)
    case xmlSerializationFailed(error: Error, code: OMCode)
    case objectSerializationFailed(reason: String, code: OMCode)
    case jsonObjectDowncastFailed(reason: JsonObjectDowncastFailureReason, code: OMCode)
    case serviceError(message: String, code: Int)
}

extension OMError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .network(let error, let code):
            return "Network error. Error code: \(code.rawValue), reason:\n\"\(error.localizedDescription)\""
        case .dataSerializationFailed(let error, let code):
            return "Data could not be serialized. Error code: \(code.rawValue), reason:\n\(error.localizedDescription)."
        case .jsonSerializationFailed(let error, let code):
            return "JSON could not be serialized. Error code: \(code.rawValue), reason:\n\((error as? AFError)?.errorDescription)"
        case .xmlSerializationFailed(let error, let code):
            return "XML could not be serialized. Error code: \(code.rawValue), reason:\n\(error.localizedDescription)."
        case .objectSerializationFailed(let reason, let code):
            return "Object serialization failed. Error code: \(code.rawValue), reason:\n\(reason)"
        case .jsonObjectDowncastFailed(let reason, let code):
            return "JSON object downcast failed. Error code: \(code.rawValue), reason:\n\(reason.localizedDescription)"
        case .serviceError(let message, _):
            return message
        }
    }
    
    
    public var serviceError: (message: String, code: Int)? {
        switch self {
        case .serviceError(let message, let code):
            return (message, code)
        default:
            return nil
        }
    }
}

extension OMError.JsonObjectDowncastFailureReason {
    var localizedDescription: String {
        switch self {
        case .responseJsonInvalid:
            return "Response JSON object was invalid, could not be downcasted."
        case .resultJsonInvalid:
            return "The `result` JSON was invalid, could not be downcasted."
        case .dataSectionInvalidObject:
            return "The `data` section of result JSON was not valid object, could not be downcasted."
        case .dataSectionInvalidCollection:
            return "The `data` section of result JSON was not valid collection objects, could not be downcasted."
        case .codeSectionInvalid:
            return "The `code` section of result JSON was invalid, could not be downcasted."
        case .messageSectionInvalid:
            return "The `message` section of result JSON was invalid, could not be downcasted."
        }
    }
}
